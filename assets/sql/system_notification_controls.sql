-- System-Wide Notification Control Extensions
-- Enhanced database schema for comprehensive notification management

-- =============================================================================
-- COMPREHENSIVE CLEANUP SECTION - Drop ALL existing objects if they exist
-- =============================================================================

-- Drop all indexes first
-- Drop all indexes (ignore errors if they don't exist)
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_SYSTEM_SETTINGS_NAME'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_SYSTEM_SETTINGS_CATEGORY'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_NOTIF_TYPES_ENABLED'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_NOTIF_TYPES_CRITICAL'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_NOTIF_SCHEDULE_ACTIVE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_NOTIF_SCHEDULE_START'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_NOTIF_ANALYTICS_DATE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP INDEX IDX_USER_NOTIF_SETTINGS_USER'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Drop all triggers (ignore errors if they don't exist)
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_SYSTEM_SETTINGS_ID'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_SYSTEM_SETTINGS_UPDATE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_NOTIF_SCHEDULE_ID'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_NOTIF_SCHEDULE_UPDATE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_NOTIF_ANALYTICS_ID'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_NOTIF_ANALYTICS_UPDATE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_USER_NOTIF_SETTINGS_ID'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TRIGGER TRG_USER_NOTIF_SETTINGS_UPDATE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Drop all added columns from NOTIFICATION_TYPES table (ignore errors if they don't exist)
BEGIN EXECUTE IMMEDIATE 'ALTER TABLE NOTIFICATION_TYPES DROP COLUMN ENABLED'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'ALTER TABLE NOTIFICATION_TYPES DROP COLUMN OVERRIDE_USER_PREFERENCES'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'ALTER TABLE NOTIFICATION_TYPES DROP COLUMN CRITICAL_NOTIFICATION'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'ALTER TABLE NOTIFICATION_TYPES DROP COLUMN EMERGENCY_OVERRIDE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'ALTER TABLE NOTIFICATION_TYPES DROP COLUMN MAINTENANCE_MODE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Drop views (ignore errors if they don't exist)
BEGIN EXECUTE IMMEDIATE 'DROP VIEW VW_ACTIVE_NOTIFICATION_TYPES'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW VW_EFFECTIVE_USER_PREFERENCES'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Drop tables in reverse dependency order (ignore errors if they don't exist)
BEGIN EXECUTE IMMEDIATE 'DROP TABLE NOTIFICATION_ANALYTICS CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE NOTIFICATION_SCHEDULES CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE USER_NOTIFICATION_SETTINGS CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SYSTEM_NOTIFICATION_SETTINGS CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Drop sequences (ignore errors if they don't exist)
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SYSTEM_NOTIFICATION_SETTINGS_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE NOTIFICATION_SCHEDULES_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE NOTIFICATION_ANALYTICS_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE USER_NOTIFICATION_SETTINGS_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- =============================================================================
-- SCHEMA CREATION SECTION
-- =============================================================================

-- Add system-wide control fields to NOTIFICATION_TYPES table
ALTER TABLE NOTIFICATION_TYPES ADD (
    ENABLED NUMBER(1) DEFAULT 1 CHECK (ENABLED IN (0,1)),
    OVERRIDE_USER_PREFERENCES NUMBER(1) DEFAULT 0 CHECK (OVERRIDE_USER_PREFERENCES IN (0,1)),
    CRITICAL_NOTIFICATION NUMBER(1) DEFAULT 0 CHECK (CRITICAL_NOTIFICATION IN (0,1)),
    EMERGENCY_OVERRIDE NUMBER(1) DEFAULT 0 CHECK (EMERGENCY_OVERRIDE IN (0,1)),
    MAINTENANCE_MODE NUMBER(1) DEFAULT 0 CHECK (MAINTENANCE_MODE IN (0,1))
);

-- Create SYSTEM_NOTIFICATION_SETTINGS table for global system controls
CREATE TABLE SYSTEM_NOTIFICATION_SETTINGS (
    SETTING_ID NUMBER PRIMARY KEY,
    SETTING_NAME VARCHAR2(100) NOT NULL UNIQUE,
    SETTING_VALUE VARCHAR2(1000),
    SETTING_TYPE VARCHAR2(50) CHECK (SETTING_TYPE IN ('BOOLEAN', 'INTEGER', 'STRING', 'TIME', 'JSON')) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    CATEGORY VARCHAR2(100) CHECK (CATEGORY IN ('SYSTEM', 'EMAIL', 'IN_APP', 'USER_EXPERIENCE', 'ANALYTICS', 'SECURITY', 'LIMITS', 'PERFORMANCE', 'RELIABILITY')) NOT NULL,
    IS_ACTIVE NUMBER(1) DEFAULT 1 CHECK (IS_ACTIVE IN (0,1)),
    REQUIRES_RESTART NUMBER(1) DEFAULT 0 CHECK (REQUIRES_RESTART IN (0,1)),
    CREATED_BY NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY NUMBER,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_SYSTEM_SETTINGS_CREATOR FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_SYSTEM_SETTINGS_UPDATER FOREIGN KEY (UPDATED_BY) REFERENCES USERS(USER_ID)
);

-- Create sequence for SYSTEM_NOTIFICATION_SETTINGS
CREATE SEQUENCE SYSTEM_NOTIFICATION_SETTINGS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE;

-- Create trigger for auto-incrementing SETTING_ID
CREATE OR REPLACE TRIGGER TRG_SYSTEM_SETTINGS_ID
    BEFORE INSERT ON SYSTEM_NOTIFICATION_SETTINGS
    FOR EACH ROW
BEGIN
    IF :NEW.SETTING_ID IS NULL THEN
        SELECT SYSTEM_NOTIFICATION_SETTINGS_SEQ.NEXTVAL INTO :NEW.SETTING_ID FROM DUAL;
    END IF;
END;
/

-- Create trigger for updating UPDATED_AT timestamp
CREATE OR REPLACE TRIGGER TRG_SYSTEM_SETTINGS_UPDATE
    BEFORE UPDATE ON SYSTEM_NOTIFICATION_SETTINGS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create NOTIFICATION_SCHEDULES table for scheduled notification control
CREATE TABLE NOTIFICATION_SCHEDULES (
    SCHEDULE_ID NUMBER PRIMARY KEY,
    NOTIFICATION_TYPE VARCHAR2(50) NOT NULL,
    ACTION VARCHAR2(20) NOT NULL CHECK (ACTION IN ('ENABLE', 'DISABLE', 'PAUSE')),
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP,
    RECURRENCE_PATTERN VARCHAR2(100), -- CRON-like pattern: daily, weekly, monthly, etc.
    IS_ACTIVE NUMBER(1) DEFAULT 1 CHECK (IS_ACTIVE IN (0,1)),
    CREATED_BY NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY NUMBER,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_NOTIF_SCHEDULE_TYPE FOREIGN KEY (NOTIFICATION_TYPE) REFERENCES NOTIFICATION_TYPES(TYPE_CODE) ON DELETE CASCADE,
    CONSTRAINT FK_NOTIF_SCHEDULE_CREATOR FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_NOTIF_SCHEDULE_UPDATER FOREIGN KEY (UPDATED_BY) REFERENCES USERS(USER_ID)
);

-- Create sequence for NOTIFICATION_SCHEDULES
CREATE SEQUENCE NOTIFICATION_SCHEDULES_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE;

-- Create trigger for auto-incrementing SCHEDULE_ID
CREATE OR REPLACE TRIGGER TRG_NOTIF_SCHEDULE_ID
    BEFORE INSERT ON NOTIFICATION_SCHEDULES
    FOR EACH ROW
BEGIN
    IF :NEW.SCHEDULE_ID IS NULL THEN
        SELECT NOTIFICATION_SCHEDULES_SEQ.NEXTVAL INTO :NEW.SCHEDULE_ID FROM DUAL;
    END IF;
END;
/

-- Create trigger for updating UPDATED_AT timestamp
CREATE OR REPLACE TRIGGER TRG_NOTIF_SCHEDULE_UPDATE
    BEFORE UPDATE ON NOTIFICATION_SCHEDULES
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create NOTIFICATION_ANALYTICS table for tracking notification delivery metrics
CREATE TABLE NOTIFICATION_ANALYTICS (
    ANALYTICS_ID NUMBER PRIMARY KEY,
    NOTIFICATION_TYPE VARCHAR2(50) NOT NULL,
    DELIVERY_METHOD VARCHAR2(20) NOT NULL CHECK (DELIVERY_METHOD IN ('EMAIL', 'IN_APP', 'BOTH')),
    TOTAL_SENT NUMBER DEFAULT 0,
    TOTAL_DELIVERED NUMBER DEFAULT 0,
    TOTAL_FAILED NUMBER DEFAULT 0,
    TOTAL_OPENED NUMBER DEFAULT 0,
    ANALYTICS_DATE DATE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_NOTIF_ANALYTICS_TYPE FOREIGN KEY (NOTIFICATION_TYPE) REFERENCES NOTIFICATION_TYPES(TYPE_CODE) ON DELETE CASCADE,
    CONSTRAINT UQ_ANALYTICS_DATE_TYPE UNIQUE (NOTIFICATION_TYPE, DELIVERY_METHOD, ANALYTICS_DATE)
);

-- Create sequence for NOTIFICATION_ANALYTICS
CREATE SEQUENCE NOTIFICATION_ANALYTICS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE;

-- Create trigger for auto-incrementing ANALYTICS_ID
CREATE OR REPLACE TRIGGER TRG_NOTIF_ANALYTICS_ID
    BEFORE INSERT ON NOTIFICATION_ANALYTICS
    FOR EACH ROW
BEGIN
    IF :NEW.ANALYTICS_ID IS NULL THEN
        SELECT NOTIFICATION_ANALYTICS_SEQ.NEXTVAL INTO :NEW.ANALYTICS_ID FROM DUAL;
    END IF;
END;
/

-- Create trigger for updating UPDATED_AT timestamp
CREATE OR REPLACE TRIGGER TRG_NOTIF_ANALYTICS_UPDATE
    BEFORE UPDATE ON NOTIFICATION_ANALYTICS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create USER_NOTIFICATION_SETTINGS table for enhanced user preferences
CREATE TABLE USER_NOTIFICATION_SETTINGS (
    SETTING_ID NUMBER PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    SETTING_NAME VARCHAR2(100) NOT NULL,
    SETTING_VALUE VARCHAR2(1000),
    SETTING_TYPE VARCHAR2(50) CHECK (SETTING_TYPE IN ('BOOLEAN', 'INTEGER', 'STRING', 'TIME', 'JSON')) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_USER_NOTIF_SETTINGS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    CONSTRAINT UQ_USER_SETTING_NAME UNIQUE (USER_ID, SETTING_NAME)
);

-- Create sequence for USER_NOTIFICATION_SETTINGS
CREATE SEQUENCE USER_NOTIFICATION_SETTINGS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE;

-- Create trigger for auto-incrementing SETTING_ID
CREATE OR REPLACE TRIGGER TRG_USER_NOTIF_SETTINGS_ID
    BEFORE INSERT ON USER_NOTIFICATION_SETTINGS
    FOR EACH ROW
BEGIN
    IF :NEW.SETTING_ID IS NULL THEN
        SELECT USER_NOTIFICATION_SETTINGS_SEQ.NEXTVAL INTO :NEW.SETTING_ID FROM DUAL;
    END IF;
END;
/

-- Create trigger for updating UPDATED_AT timestamp
CREATE OR REPLACE TRIGGER TRG_USER_NOTIF_SETTINGS_UPDATE
    BEFORE UPDATE ON USER_NOTIFICATION_SETTINGS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Insert default system notification settings
INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'NOTIFICATIONS_ENABLED', '1', 'BOOLEAN', 'Master switch for all notifications system-wide', 'SYSTEM', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'EMAIL_NOTIFICATIONS_ENABLED', '1', 'BOOLEAN', 'Global switch for email notifications', 'EMAIL', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'IN_APP_NOTIFICATIONS_ENABLED', '1', 'BOOLEAN', 'Global switch for in-app notifications', 'IN_APP', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'MAINTENANCE_MODE', '0', 'BOOLEAN', 'System maintenance mode - only critical notifications allowed', 'SYSTEM', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'EMERGENCY_MODE', '0', 'BOOLEAN', 'Emergency mode - override all user preferences for critical notifications', 'SYSTEM', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'MAX_DAILY_NOTIFICATIONS_PER_USER', '50', 'INTEGER', 'Maximum number of notifications per user per day', 'LIMITS', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'BULK_NOTIFICATION_BATCH_SIZE', '100', 'INTEGER', 'Number of notifications to process in each batch', 'PERFORMANCE', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'NOTIFICATION_RETRY_ATTEMPTS', '3', 'INTEGER', 'Number of retry attempts for failed notifications', 'RELIABILITY', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'QUIET_HOURS_START', '22:00', 'TIME', 'Start time for quiet hours (no non-critical notifications)', 'USER_EXPERIENCE', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

INSERT INTO SYSTEM_NOTIFICATION_SETTINGS (SETTING_NAME, SETTING_VALUE, SETTING_TYPE, DESCRIPTION, CATEGORY, CREATED_BY) 
SELECT 'QUIET_HOURS_END', '08:00', 'TIME', 'End time for quiet hours', 'USER_EXPERIENCE', USER_ID 
FROM USERS u JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID WHERE r.ROLE_NAME = 'Site Admin' AND ROWNUM = 1;

-- Update existing notification types with system control fields
UPDATE NOTIFICATION_TYPES SET 
    ENABLED = 1,
    CRITICAL_NOTIFICATION = CASE 
        WHEN TYPE_CODE IN ('BOOKING_CONFIRMATION', 'BOOKING_CANCELLATION', 'BOOKING_REJECTION', 'PASSWORD_RESET') THEN 1 
        ELSE 0 
    END,
    OVERRIDE_USER_PREFERENCES = CASE 
        WHEN TYPE_CODE IN ('SYSTEM_MAINTENANCE', 'NEW_USER_ACCESS_REQUEST') THEN 1 
        ELSE 0 
    END
WHERE 1=1;

-- Create indexes for performance optimization
CREATE INDEX IDX_SYSTEM_SETTINGS_NAME ON SYSTEM_NOTIFICATION_SETTINGS(SETTING_NAME);
CREATE INDEX IDX_SYSTEM_SETTINGS_CATEGORY ON SYSTEM_NOTIFICATION_SETTINGS(CATEGORY);
CREATE INDEX IDX_NOTIF_TYPES_ENABLED ON NOTIFICATION_TYPES(ENABLED);
CREATE INDEX IDX_NOTIF_TYPES_CRITICAL ON NOTIFICATION_TYPES(CRITICAL_NOTIFICATION);
CREATE INDEX IDX_NOTIF_SCHEDULE_ACTIVE ON NOTIFICATION_SCHEDULES(IS_ACTIVE);
CREATE INDEX IDX_NOTIF_SCHEDULE_START ON NOTIFICATION_SCHEDULES(START_TIME);
CREATE INDEX IDX_NOTIF_ANALYTICS_DATE ON NOTIFICATION_ANALYTICS(ANALYTICS_DATE);
CREATE INDEX IDX_USER_NOTIF_SETTINGS_USER ON USER_NOTIFICATION_SETTINGS(USER_ID);

-- Create a view for active notification types considering system settings
CREATE OR REPLACE VIEW VW_ACTIVE_NOTIFICATION_TYPES AS
SELECT 
    nt.*,
    CASE 
        WHEN sns_global.SETTING_VALUE = '0' THEN 0
        WHEN sns_maint.SETTING_VALUE = '1' AND nt.CRITICAL_NOTIFICATION = 0 THEN 0
        WHEN nt.ENABLED = 0 THEN 0
        ELSE 1
    END AS IS_CURRENTLY_ACTIVE,
    sns_global.SETTING_VALUE AS GLOBAL_NOTIFICATIONS_ENABLED,
    sns_maint.SETTING_VALUE AS MAINTENANCE_MODE_ACTIVE
FROM NOTIFICATION_TYPES nt
CROSS JOIN (
    SELECT SETTING_VALUE 
    FROM SYSTEM_NOTIFICATION_SETTINGS 
    WHERE SETTING_NAME = 'NOTIFICATIONS_ENABLED'
) sns_global
CROSS JOIN (
    SELECT SETTING_VALUE 
    FROM SYSTEM_NOTIFICATION_SETTINGS 
    WHERE SETTING_NAME = 'MAINTENANCE_MODE'
) sns_maint;

-- Create a view for effective user notification preferences
CREATE OR REPLACE VIEW VW_EFFECTIVE_USER_PREFERENCES AS
SELECT 
    u.USER_ID,
    u.FIRST_NAME,
    u.LAST_NAME,
    u.EMAIL,
    nt.TYPE_CODE,
    nt.DISPLAY_NAME,
    nt.CATEGORY,
    nt.ENABLED AS TYPE_ENABLED,
    nt.CRITICAL_NOTIFICATION,
    nt.OVERRIDE_USER_PREFERENCES,
    COALESCE(np.EMAIL_ENABLED, nt.DEFAULT_EMAIL_ENABLED) AS EMAIL_ENABLED,
    COALESCE(np.IN_APP_ENABLED, nt.DEFAULT_IN_APP_ENABLED) AS IN_APP_ENABLED,
    CASE 
        WHEN nt.OVERRIDE_USER_PREFERENCES = 1 THEN 1
        WHEN nt.ENABLED = 0 THEN 0
        ELSE COALESCE(np.EMAIL_ENABLED, nt.DEFAULT_EMAIL_ENABLED)
    END AS EFFECTIVE_EMAIL_ENABLED,
    CASE 
        WHEN nt.OVERRIDE_USER_PREFERENCES = 1 THEN 1
        WHEN nt.ENABLED = 0 THEN 0
        ELSE COALESCE(np.IN_APP_ENABLED, nt.DEFAULT_IN_APP_ENABLED)
    END AS EFFECTIVE_IN_APP_ENABLED
FROM USERS u
JOIN ROLES r ON u.ROLE_ID = r.ROLE_ID
CROSS JOIN NOTIFICATION_TYPES nt
LEFT JOIN NOTIFICATION_PREFERENCES np ON u.USER_ID = np.USER_ID AND nt.TYPE_CODE = np.NOTIFICATION_TYPE
WHERE u.STATUS = 'Active'
AND (nt.ADMIN_ONLY = 0 OR r.ROLE_NAME IN ('Admin', 'Site Admin'));

-- Grant necessary permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON SYSTEM_NOTIFICATION_SETTINGS TO CONFROOM_USER;
GRANT SELECT, INSERT, UPDATE, DELETE ON NOTIFICATION_SCHEDULES TO CONFROOM_USER;
GRANT SELECT, INSERT, UPDATE, DELETE ON NOTIFICATION_ANALYTICS TO CONFROOM_USER;
GRANT SELECT, INSERT, UPDATE, DELETE ON USER_NOTIFICATION_SETTINGS TO CONFROOM_USER;
GRANT SELECT ON VW_ACTIVE_NOTIFICATION_TYPES TO CONFROOM_USER;
GRANT SELECT ON VW_EFFECTIVE_USER_PREFERENCES TO CONFROOM_USER;

-- Grant sequence access
GRANT SELECT ON SYSTEM_NOTIFICATION_SETTINGS_SEQ TO CONFROOM_USER;
GRANT SELECT ON NOTIFICATION_SCHEDULES_SEQ TO CONFROOM_USER;
GRANT SELECT ON NOTIFICATION_ANALYTICS_SEQ TO CONFROOM_USER;
GRANT SELECT ON USER_NOTIFICATION_SETTINGS_SEQ TO CONFROOM_USER;

COMMIT;

-- Add comments for documentation
COMMENT ON TABLE SYSTEM_NOTIFICATION_SETTINGS IS 'Global system settings for notification control and configuration';
COMMENT ON TABLE NOTIFICATION_SCHEDULES IS 'Scheduled activation/deactivation of notification types';
COMMENT ON TABLE NOTIFICATION_ANALYTICS IS 'Daily analytics for notification delivery tracking';
COMMENT ON TABLE USER_NOTIFICATION_SETTINGS IS 'Enhanced user-specific notification settings like quiet hours, frequency limits, etc.';

-- Add column comments for system control fields
COMMENT ON COLUMN NOTIFICATION_TYPES.ENABLED IS 'Global enable/disable switch for this notification type';
COMMENT ON COLUMN NOTIFICATION_TYPES.OVERRIDE_USER_PREFERENCES IS 'When 1, ignores user preferences and always sends notification';
COMMENT ON COLUMN NOTIFICATION_TYPES.CRITICAL_NOTIFICATION IS 'When 1, this notification bypasses maintenance mode and quiet hours';
COMMENT ON COLUMN NOTIFICATION_TYPES.EMERGENCY_OVERRIDE IS 'When 1, this notification bypasses all user and system settings';
COMMENT ON COLUMN NOTIFICATION_TYPES.MAINTENANCE_MODE IS 'When 1, this notification is disabled during maintenance mode';