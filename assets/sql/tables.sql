-- ========================================
-- UPDATED Room Reservation System Schema
-- ========================================

-- 1. ROLES
CREATE TABLE ROLES (
    ROLE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ROLE_NAME VARCHAR2(100) UNIQUE NOT NULL
);

-- 2. USERS
CREATE TABLE USERS (
    USER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    EMPLID NUMBER,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    ROLE_ID NUMBER,
    STATUS VARCHAR2(20) CHECK (STATUS IN ('Active', 'Inactive')),
    NOTIFICATION_PREFERENCES CLOB,
    LASTLOGGEDON TIMESTAMP,
    DATEENTERED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ENTEREDBYID NUMBER,
    DATEMODIFIED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    MODIFIEDBYID NUMBER,
    CONSTRAINT FK_USERS_ROLES FOREIGN KEY (ROLE_ID)
        REFERENCES ROLES(ROLE_ID)
); 

-- 3. ROOMS
CREATE TABLE ROOMS (
    ROOM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ROOM_NAME VARCHAR2(100) NOT NULL,
    BUILDING VARCHAR2(100) NOT NULL,
    ROOM_NUMBER NUMBER NOT NULL,
    CAPACITY NUMBER NOT NULL,
    DESCRIPTION VARCHAR2(500),
    MAINTENANCE_STATUS VARCHAR2(20) CHECK (MAINTENANCE_STATUS IN ('YES', 'NO')),
    RECURRING VARCHAR2(20) CHECK (RECURRING IN ('YES', 'NO')),
    ROOM_IMAGE CLOB
);

-- 4. AMENITIES
CREATE TABLE AMENITIES (
    AMENITY_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AMENITY_NAME VARCHAR2(100) UNIQUE NOT NULL,
    DESCRIPTION VARCHAR2(500),
    ICON_ID NUMBER,
    CONSTRAINT FK_AMENITIES_ICONS FOREIGN KEY (ICON_ID)
        REFERENCES ICONS(ICON_ID)
)

-- 5. ROOM_AMENITIES (Join Table)
CREATE TABLE ROOM_AMENITIES (
    ROOM_ID NUMBER NOT NULL,
    AMENITY_ID NUMBER NOT NULL,
    PRIMARY KEY (ROOM_ID, AMENITY_ID),
    CONSTRAINT FK_ROOM_AMENITIES_ROOMS FOREIGN KEY (ROOM_ID)
        REFERENCES ROOMS(ROOM_ID),
    CONSTRAINT FK_ROOM_AMENITIES_AMENITIES FOREIGN KEY (AMENITY_ID)
        REFERENCES AMENITIES(AMENITY_ID)
);

-- 6. BOOKINGS
CREATE TABLE BOOKINGS (
    BOOKING_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ROOM_ID NUMBER NOT NULL,
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP NOT NULL,
    RECURRING_DETAILS VARCHAR2(500),
    STATUS VARCHAR2(20) CHECK (STATUS IN ('Confirmed', 'Cancelled')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    APPROVED_BY NUMBER,
    COMMENTS VARCHAR2(500),
    CONSTRAINT FK_BOOKINGS_APPROVED_BY FOREIGN KEY (APPROVED_BY)
        REFERENCES USERS(USER_ID),
    CONSTRAINT FK_BOOKINGS_USERS FOREIGN KEY (USER_ID)
        REFERENCES USERS(USER_ID),
    CONSTRAINT FK_BOOKINGS_ROOMS FOREIGN KEY (ROOM_ID)
        REFERENCES ROOMS(ROOM_ID)
);

-- 7. NOTIFICATIONS
CREATE TABLE NOTIFICATIONS (
    NOTIFICATION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    TYPE VARCHAR2(50) NOT NULL,
    CONTENT VARCHAR2(1000),
    STATUS VARCHAR2(20) CHECK (STATUS IN ('Read', 'Unread')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_NOTIFICATIONS_USERS FOREIGN KEY (USER_ID)
        REFERENCES USERS(USER_ID)
);

-- 8. MAINTENANCE
CREATE TABLE MAINTENANCE (
    MAINTENANCE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ROOM_ID NUMBER NOT NULL,
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP NOT NULL,
    DESCRIPTION VARCHAR2(1000),
    STATUS VARCHAR2(20) CHECK (STATUS IN ('Scheduled', 'In Progress', 'Completed')),
    CONSTRAINT FK_MAINTENANCE_ROOMS FOREIGN KEY (ROOM_ID)
        REFERENCES ROOMS(ROOM_ID)
);

-- 9. SYSTEM_LOGS
CREATE TABLE SYSTEM_LOGS (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER,
    ACTION VARCHAR2(100) NOT NULL,
    DETAILS VARCHAR2(1000),
    TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_SYSTEM_LOGS_USERS FOREIGN KEY (USER_ID)
        REFERENCES USERS(USER_ID)
);

--10 . ICONS
CREATE TABLE ICONS (
    ICON_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ICON_NAME VARCHAR2(100) UNIQUE NOT NULL,
    ICON_CLASS VARCHAR2(100) NOT NULL       -- CSS class for the icon (e.g., FontAwesome class)
);

-- 11. ROOM_RATINGS
CREATE TABLE ROOM_RATINGS (
    RATING_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BOOKING_ID NUMBER NOT NULL,
    USER_ID NUMBER NOT NULL,
    ROOM_ID NUMBER NOT NULL,
    RATING NUMBER CHECK (RATING BETWEEN 1 AND 5),
    FEEDBACK VARCHAR2(1000),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_RATINGS_BOOKINGS FOREIGN KEY (BOOKING_ID)
        REFERENCES BOOKINGS(BOOKING_ID),
    CONSTRAINT FK_RATINGS_USERS FOREIGN KEY (USER_ID)
        REFERENCES USERS(USER_ID),
    CONSTRAINT FK_RATINGS_ROOMS FOREIGN KEY (ROOM_ID)
        REFERENCES ROOMS(ROOM_ID)
);

-- 12. ROOM_USAGE_STATS
CREATE TABLE ROOM_USAGE_STATS (
    STAT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ROOM_ID NUMBER NOT NULL,
    DATE_RECORD DATE NOT NULL,
    TOTAL_BOOKINGS NUMBER DEFAULT 0,
    TOTAL_HOURS_BOOKED NUMBER DEFAULT 0,
    CANCELLATIONS NUMBER DEFAULT 0,
    NO_SHOWS NUMBER DEFAULT 0,
    CONSTRAINT FK_USAGE_STATS_ROOMS FOREIGN KEY (ROOM_ID)
        REFERENCES ROOMS(ROOM_ID)
);

-- ========================================
-- STORED PROCEDURES
-- ========================================

-- Procedure to log database changes
DELIMITER $$
CREATE PROCEDURE LogDatabaseChange(
    IN userId INT,
    IN actionType VARCHAR(100),
    IN tableName VARCHAR(100),
    IN recordId VARCHAR(255),
    IN changeDetails TEXT
)
BEGIN
    INSERT INTO SYSTEM_LOGS (
        USER_ID,
        ACTION,
        DETAILS,
        TIMESTAMP
    )
    VALUES (
        userId,
        actionType,
        CONCAT('Table: ', tableName, ', Record ID: ', recordId, ', Changes: ', changeDetails),
        CURRENT_TIMESTAMP
    );
END$$
DELIMITER ;

-- Procedure to add a room
DELIMITER $$
CREATE PROCEDURE AddRoom(
    IN roomName VARCHAR(100),
    IN building VARCHAR(100),
    IN floor INT,
    IN capacity INT,
    IN description VARCHAR(500),
    IN userId INT
)
BEGIN
    DECLARE newRoomId INT;

    -- Insert into ROOMS table
    INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION)
    VALUES (roomName, building, floor, capacity, description);

    -- Retrieve the newly generated ROOM_ID
    SET newRoomId = LAST_INSERT_ID();

    -- Log the action in SYSTEM_LOGS
    CALL LogDatabaseChange(
        userId,
        'INSERT',
        'ROOMS',
        newRoomId,
        CONCAT('Room Name: ', roomName, ', Building: ', building, ', Floor: ', floor, ', Capacity: ', capacity, ', Description: ', description)
    );
END$$
DELIMITER ;

-- Procedure to update an amenity
DELIMITER $$
CREATE PROCEDURE UpdateAmenity(
    IN amenityId INT,
    IN amenityName VARCHAR(100),
    IN description VARCHAR(500),
    IN userId INT
)
BEGIN
    -- Update AMENITIES table
    UPDATE AMENITIES
    SET AMENITY_NAME = amenityName,
        DESCRIPTION = description
    WHERE AMENITY_ID = amenityId;

    -- Log the action in SYSTEM_LOGS
    CALL LogDatabaseChange(
        userId,
        'UPDATE',
        'AMENITIES',
        amenityId,
        CONCAT('Updated Amenity Name: ', amenityName, ', Description: ', description)
    );
END$$
DELIMITER ;

-- Procedure to add a booking
DELIMITER $$
CREATE PROCEDURE AddBooking(
    IN userId INT,
    IN roomId INT,
    IN startTime TIMESTAMP,
    IN endTime TIMESTAMP,
    IN recurringDetails VARCHAR(500)
)
BEGIN
    DECLARE newBookingId INT;

    -- Insert into BOOKINGS table
    INSERT INTO BOOKINGS (USER_ID, ROOM_ID, START_TIME, END_TIME, RECURRING_DETAILS, STATUS)
    VALUES (userId, roomId, startTime, endTime, recurringDetails, 'Confirmed');

    -- Retrieve the newly generated BOOKING_ID
    SET newBookingId = LAST_INSERT_ID();

    -- Log the action in SYSTEM_LOGS
    CALL LogDatabaseChange(
        userId,
        'INSERT',
        'BOOKINGS',
        newBookingId,
        CONCAT('Room ID: ', roomId, ', Start Time: ', startTime, ', End Time: ', endTime, ', Recurring: ', recurringDetails)
    );
END$$
DELIMITER ;

-- Procedure to update room usage statistics
CREATE OR REPLACE PROCEDURE UPDATE_ROOM_USAGE_STATS(
    p_date IN DATE
)
AS
BEGIN
    MERGE INTO ROOM_USAGE_STATS rus
    USING (
        SELECT 
            ROOM_ID,
            COUNT(*) as TOTAL_BOOKINGS,
            SUM((EXTRACT(EPOCH FROM END_TIME) - EXTRACT(EPOCH FROM START_TIME))/3600) as TOTAL_HOURS,
            SUM(CASE WHEN STATUS = 'Cancelled' THEN 1 ELSE 0 END) as CANCELLATIONS,
            0 as NO_SHOWS  -- This would need to be updated based on your no-show tracking logic
        FROM BOOKINGS
        WHERE TRUNC(START_TIME) = p_date
        GROUP BY ROOM_ID
    ) daily_stats
    ON (rus.ROOM_ID = daily_stats.ROOM_ID AND rus.DATE_RECORD = p_date)
    WHEN MATCHED THEN
        UPDATE SET 
            TOTAL_BOOKINGS = daily_stats.TOTAL_BOOKINGS,
            TOTAL_HOURS_BOOKED = daily_stats.TOTAL_HOURS,
            CANCELLATIONS = daily_stats.CANCELLATIONS,
            NO_SHOWS = daily_stats.NO_SHOWS
    WHEN NOT MATCHED THEN
        INSERT (ROOM_ID, DATE_RECORD, TOTAL_BOOKINGS, TOTAL_HOURS_BOOKED, CANCELLATIONS, NO_SHOWS)
        VALUES (daily_stats.ROOM_ID, p_date, daily_stats.TOTAL_BOOKINGS, 
                daily_stats.TOTAL_HOURS, daily_stats.CANCELLATIONS, daily_stats.NO_SHOWS);
    COMMIT;
END;
/

-- ========================================
-- VIEWS FOR REPORTING
-- ========================================

-- 1. Daily Reservation Summary
CREATE OR REPLACE VIEW DAILY_RESERVATION_SUMMARY AS
SELECT 
    TRUNC(b.START_TIME) as BOOKING_DATE,
    COUNT(*) as TOTAL_RESERVATIONS,
    COUNT(DISTINCT b.USER_ID) as UNIQUE_USERS,
    COUNT(DISTINCT b.ROOM_ID) as ROOMS_USED,
    ROUND(AVG((EXTRACT(EPOCH FROM b.END_TIME) - EXTRACT(EPOCH FROM b.START_TIME))/3600), 2) as AVG_DURATION_HOURS,
    SUM(CASE WHEN b.STATUS = 'Cancelled' THEN 1 ELSE 0 END) as CANCELLATIONS
FROM BOOKINGS b
GROUP BY TRUNC(b.START_TIME);

-- 2. Room Utilization Report
CREATE OR REPLACE VIEW ROOM_UTILIZATION_REPORT AS
SELECT 
    r.ROOM_ID,
    r.ROOM_NAME,
    r.BUILDING,
    COUNT(b.BOOKING_ID) as TOTAL_BOOKINGS,
    ROUND(AVG(CASE WHEN rt.RATING IS NOT NULL THEN rt.RATING ELSE NULL END), 2) as AVG_RATING,
    COUNT(DISTINCT b.USER_ID) as UNIQUE_USERS,
    SUM(CASE WHEN b.STATUS = 'Cancelled' THEN 1 ELSE 0 END) as CANCELLATIONS
FROM ROOMS r
LEFT JOIN BOOKINGS b ON r.ROOM_ID = b.ROOM_ID
LEFT JOIN ROOM_RATINGS rt ON b.BOOKING_ID = rt.BOOKING_ID
GROUP BY r.ROOM_ID, r.ROOM_NAME, r.BUILDING;

-- 3. User Booking Patterns
CREATE OR REPLACE VIEW USER_BOOKING_PATTERNS AS
SELECT 
    u.USER_ID,
    u.FIRST_NAME || ' ' || u.LAST_NAME as FULL_NAME,
    COUNT(b.BOOKING_ID) as TOTAL_BOOKINGS,
    ROUND(AVG((EXTRACT(EPOCH FROM b.END_TIME) - EXTRACT(EPOCH FROM b.START_TIME))/3600), 2) as AVG_BOOKING_DURATION,
    ROUND(AVG(EXTRACT(DAY FROM b.START_TIME - b.CREATED_AT)), 2) as AVG_LEAD_TIME_DAYS,
    COUNT(DISTINCT r.ROOM_ID) as DIFFERENT_ROOMS_USED
FROM USERS u
LEFT JOIN BOOKINGS b ON u.USER_ID = b.USER_ID
LEFT JOIN ROOMS r ON b.ROOM_ID = r.ROOM_ID
GROUP BY u.USER_ID, u.FIRST_NAME, u.LAST_NAME;

-- 4. Hourly Usage Patterns
CREATE OR REPLACE VIEW HOURLY_USAGE_PATTERNS AS
SELECT 
    EXTRACT(HOUR FROM b.START_TIME) as HOUR_OF_DAY,
    COUNT(*) as TOTAL_BOOKINGS,
    COUNT(DISTINCT b.ROOM_ID) as ROOMS_USED,
    COUNT(DISTINCT b.USER_ID) as UNIQUE_USERS
FROM BOOKINGS b
GROUP BY EXTRACT(HOUR FROM b.START_TIME)
ORDER BY HOUR_OF_DAY;

-- ========================================
-- Indexes for Performance Optimization
-- ========================================

-- Indexes on foreign keys
CREATE INDEX IDX_USERS_ROLE_ID ON USERS(ROLE_ID);
CREATE INDEX IDX_BOOKINGS_USER_ID ON BOOKINGS(USER_ID);
CREATE INDEX IDX_BOOKINGS_ROOM_ID ON BOOKINGS(ROOM_ID);
CREATE INDEX IDX_NOTIFICATIONS_USER_ID ON NOTIFICATIONS(USER_ID);
CREATE INDEX IDX_MAINTENANCE_ROOM_ID ON MAINTENANCE(ROOM_ID);
CREATE INDEX IDX_SYSTEM_LOGS_USER_ID ON SYSTEM_LOGS(USER_ID);

-- ========================================
-- Additional Constraints and Triggers (Optional)
-- ========================================

-- Example Trigger to update UPDATED_AT column on USERS table
CREATE OR REPLACE TRIGGER TRG_USERS_BEFORE_UPDATE
BEFORE UPDATE ON USERS
FOR EACH ROW
BEGIN
    :NEW.DATEMODIFIED := CURRENT_TIMESTAMP;
END;
/

-- Similarly, triggers can be created for other tables as needed.
-- ========================================
-- Sample Data (Optional)
-- ========================================

-- Insert sample roles
INSERT INTO ROLES (ROLE_NAME) VALUES ('Site Admin');
INSERT INTO ROLES (ROLE_NAME) VALUES ('Admin');
INSERT INTO ROLES (ROLE_NAME) VALUES ('User');

-- Insert sample icons
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Projector', 'fa fa-projector');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Whiteboard', 'fa fa-whiteboard');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Video Conferencing', 'fa fa-video');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Phone', 'fa fa-phone');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Camera', 'fa fa-camera');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Clickshare', 'fa fa-map-pin');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Computer', 'fa fa-computer');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Keyboard and Mouse', 'fa fa-keyboard');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Docking Station', 'fa fa-dock');
INSERT INTO ICONS (ICON_NAME, ICON_CLASS) VALUES ('Monitor', 'fa fa-tv');

-- Insert sample amenities
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Projector', 'High-definition projector', 'fa-projector');
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Whiteboard', 'Wall-mounted whiteboard', 'fa-chalkboard');
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Video Conferencing', 'Supports remote meetings', 3);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Phone', 'Desk phone', 4);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Camera', 'Camera for video conferencing', 5);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Clickshare', 'Supports clickshare', 6);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Computer', 'Desktop computer', 7);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Keyboard and Mouse', 'Keyboard and mouse', 8);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('Docking Station', 'Laptop docking station', 9);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('1 Monitor', 'One monitor for Desktop computer', 10);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('2 Monitors', 'Two monitors for Desktop computer', 10);
INSERT INTO AMENITIES (AMENITY_NAME, DESCRIPTION, ICON_ID) VALUES ('3 Monitors', 'Three monitors for Desktop computer', 10);

INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Library',        'FC-11', 2017, 8, 'Small conference room');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Meeting Room',   'FC-11', 2019, 8, 'Small conference room');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Conference Room','FC-11', 2037, 25, 'Large conference room');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 1',   'FC-11', 2006, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 2',   'FC-11', 2010, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 3',   'FC-11', 2012, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 4',   'FC-11', 2016, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 5',   'FC-11', 2021, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 6',   'FC-11', 2023, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 7',   'FC-11', 2030, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 8',   'FC-11', 2032, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 9',   'FC-11', 2036, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 10',  'FC-11', 2038, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 11',  'FC-11', 2042, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 12',  'FC-11', 2044, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 13',  'FC-11', 2048, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 14',  'FC-11', 2049, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 15',  'FC-11', 2052, 1, 'Office');
INSERT INTO ROOMS (ROOM_NAME, BUILDING, ROOM_NUMBER, CAPACITY, DESCRIPTION) VALUES ('Focus Room 16',  'FC-11', 2054, 1, 'Office');
 